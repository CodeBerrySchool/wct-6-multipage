/*------------------------------------*\
  #HELPER-STYLES
\*------------------------------------*/

* {
  box-sizing: border-box;
}

body {
  color: #333;
  font-family: 'Gentium Basic', serif;
  line-height: 1.5;
}



/* [x] The normalize.css has a top and bottom margin on h1-6 and p elements.
These helpers nullify that so it won't interfere with the grid. */

h1, h2,
p,
ul {
  margin: 0;
}

/* This rule set extends the uniform vertical rhythm to the headings and
paragraphs. Not sure if  it belongs here or to the layout grid.  */

h2,
p {
  margin-bottom: 1.5rem;
}

h2 {
  font-family: "Open Sans", sans-serif;
  font-size: 1.5rem;
  font-weight: 700;
  color: #bdbdbd;
}




/*------------------------------------*\
  #LAYOUT-STYLES
\*------------------------------------*/

/*
We use the following classes to create a very basic grid.

The .layout element creates a fluid container which is the immediate child of
the body. Inside that there is two kinds of layout containers: a 100% wide and
a 90% wide one.

The grid is capable of creating a three-column layout. The .layout__item--one-
third div takes up the 30%  of the available space and is floated to the left,
creating the three-column layout. It is only triggered upwards from 768px
thanks to a media query. Floats are cleared via a pseudo- element and a
dedicated class.

The vertical rhythm is established through a single margin-bottom declaration
on the .layout__item class. Since this class is present on every grid item, it
can create a uniform margin spacing.

The three column layout needs gutters. This is solved through margin
declarations for the first and last column. The width of the columns is
established as 30%, the remaining 9.9% is divided between a right margin for
the first and a left margin for the last column. (Note: This could've been
done way more easier through flexbox with a space-between value.)

The margin-bottom: 0; declaration on the last layout__item ensures that the
end of the page doesn't have extra margins. You may need to check the last
item  in the last container though. It could add extra margins on its own
which you have to handle differently. 

The .layout__item--nested modifier strips the container of its bottom margin.
This is useful because when you have a container inside another container
their bottom margins compound.  With this modifier you can maintain the
unified vertical rhythm. 

However this poses a problem when the nested containers are stacked and they
have no margin. The media query takes care of that by switching  back the
original margin on the nested elements but only in mobile layout.

The .layout__item--two-thirds is in a media query. In this case it solves  the
problem of the responsive embedded iframe that is in a 100% wide container.
When the screen gets large enough, the query triggers and switches the
embedded  iframe to a centered 66.6% wide container. For this to work the
class must be  placed below the full-width class (CSS cascading).

The one-fourth creates a 4-column view. Its margin is the same as the 3 column. 

The layout__item--centered modifier centers text-based elements in a container.

*/

.layout {
  margin: 0;
  padding: 0;
  background: lightblue;
}


  .layout__item {
    margin-bottom: 1.5rem;
  }


  .layout__item--fullwidth {
    width: 100%;
    background: lightgreen;

  }


  .layout__item--ninetenth {
    width: 90%;
    max-width: 1600px;
    margin: 0 auto 1.5rem;
    background: lightyellow;
  }


  @media (min-width: 768px) {

    .layout__item--two-thirds {
      width: 66.6%;
      max-width: 1280px;
      margin: 0 auto 1.5rem;
      background: gold;
    }

    .layout__item--half {
      width: 50%;
      max-width: 1000px;
      margin: 0 auto 1.5rem;
      background: forestgreen;
    }

  }


  @media (min-width: 768px) {

    .layout__item--one-third {
      width: 30%;
      float: left;
      overflow: hidden;
      background: rebeccapurple;
    }

    .layout__item--one-third:first-child {
      margin-right: 4.95%;
    }

    .layout__item--one-third:last-child {
      margin-left: 4.95%;
    }

  }

  @media (min-width: 768px) {

    .layout__item--one-fourth {
      width: 21.2875%;
      float: left;
      overflow: hidden;
      background: rebeccapurple;
      margin-right: 4.95%;
    }

    .layout__item--one-fourth:last-child {
      margin-right: 0;
    }

  }

  .layout__item--clearfix::after {
    content: "";
    clear: both;
    display: block;
  }


  .layout__item--nested {
    margin-bottom: 0;
  }

  @media (max-width: 768px) {
    
    .layout__item--nested {
      margin-bottom: 1.5rem;
    }

  }


  .layout__item:last-child {
    margin-bottom: 0;
  }

  .layout__item--centered {
    text-align: center;
  }



/*------------------------------------*\
  #BUTTON-STYLES
\*------------------------------------*/


/* This section contains styles for all button components. If you want to
change the color, dimensions typography, hover or active states of the
buttons, you can do so here.

How buttons build up: there is a base .button class which contains everything
except for specific  color schemes. Modifiers give those colors. If you need a
smaller button, there is a modifier for  that too.

Note: the newsletter signup form's button has some specific styling because of
its placement and because its a <button> not an anchor tag. You can find those
in the newsletters signup form section. */





/*---- ##BUTTON-BASE-ELEMENT ----*/


/* [1] Allows the element to accept box model values.

[2] Creates space on every side of the button text to make it more like a
button. The exact values are a bit of a hack. The design needs a specific
width and height for the button but those are a bit tricky with anchor
elements. As a semi-hacky solution, we calculated the exact paddings needed
from the calculated width of the text using the  Chrome Inspector. This is
fine until the font-size of the button and its content doesn't change. But if
either of those  happen, you need to re-calculate these paddings or find
another solution.

[3] The normal font-weight is there to override any contextual properties.
E.g. in the main header everything is bold. If this property'd be omitted,
the button's text would appear bold as well.

The rest of the styles are cosmetic and rather self-explanatory. */

.button {
  display: inline-block; /*[1]*/
  padding: .65703125rem 4.56396875rem; /*[2, !]*/
  box-shadow: 0px 4px 4px rgba(0,0,0, .25); /*[!]*/
  font-family: 'Open Sans', sans-serif; /*[!]*/
  font-size: 1.125rem; /*[!]*/
  font-weight: 400; /*[3, !]*/
  text-align: center; 
  text-decoration: none;
}


  /*-- ###BUTTON-BASE-ELEMENT-MODIFIERS --*/

  .button--small {
    padding: .65703125rem 2.281984375rem; /*[2, !]*/
  }

  .button--cta-primary {
    background: #ff4e50;
    color: #fff;
  }

  .button--cta-secondary {
    background: #ede574;
    color: #f2994a;
  }

  .button--cta-tertiary {
    background: #27ae60;
    color: #bccd1e;
  }

  .button--signup {
    background: #bacc14;
    color: #27ae60;
  }

  .button:hover {
    /* FIXME - needs a hover state.*/
  }

  .button:active {
   /* FIXME - needs an active state.*/ 
  }



/*------------------------------------*\
  #TESTIMONIAL-STYLES
\*------------------------------------*/


/* This section contains the base styles of the testimonial component. It is
extended in the theme.css file with theme-specific modifiers.

The p element's bottom margin comes from the layout grid's utilities and the
line height is set by the global body element declaration in utilities. 

[1] Adds a bottom margin that conforms to the vertical rhythm defined in the
layout grid. If you want to use a different rhythm, make sure to adapt this. */


.testimonial__image {
  width: 100%;
  margin-bottom: 1.5rem; /*[1]*/
}





/*------------------------------------*\
  #TEAM-CARD-STYLES
\*------------------------------------*/


/* This is the base team-card component. It's extended in the theme.css file,
under the team-card-theme-modifiers section. */

.team-card__image {
  width: 100%;
}





/*------------------------------------*\
  #MEDIA-OBJECT-STYLES
\*------------------------------------*/

/*  This section creates a responsive wrapper for iframes. Since iframes
arrive in a fixed container,  we need to make them responsive somehow. This
method requires a wrapper around the iframe (.responsive-media)  and a class
on the iframe itself (.responsive-media__embed). The wrapper has an intrinsic
ratio  using a padding in percentages which corresponds to the 16:9 ratio of
the iframe. The wrapper essentially forces  the iframe to recalculate its
height on every viewport size.; 

The videos's aspect ration is 06:9 but that's not suitable for the map embeds
this is why we have the .responsive-media--map modifier.
*/

.responsive-media {
  position: relative;
  padding-bottom: 56.25%; /* 16:9 aspect ratio */
  height: 0;
}

.responsive-media--map {
  padding-bottom: 38.1944%;
}

  .responsive-media__embed {
    position: absolute;
    top: 0;
    left: 0;
    height: 100%;
    width: 100%;
  }






/*------------------------------------*\
  #MAIN-HEADER-STYLES
\*------------------------------------*/


/* This section styles the main header element which serves as an omnipresent
navigational bar. It has two distinct views: a mobile one which is a hamburger
menu that unfolds to a vertical nav  and a desktop one which houses a
horizontal navigation. The solution for a responsive nav is a pure CSS one
that utilizes a hidden checkbox and sibling selectors. When one nav is active,
the other is turned off using display: none.

The header contains a checkbox input, its label, 3 spans that form the
animated hamburger icon, (layed on top of the label so it acts as a real
icon), a mobile nav with an unordered list and anchor elements and a distinct
desktop nav element with anchors. There are also rule sets for the animations.

The whole header element is self-contained therefore doesn't rely on its
environment for positioning and styling. You can pick it up and include it in
any project.

The declarations that are signaled with an exclamation point ([!]) are
responsible for the cosmetics or positioning of the header or its elements.
You can change these if you need. */





/*---- ##BASE-HEADER-ELEMENT ----*/


/* [1] The .header-main creates an absolutely positioned wrapper that serves
as a base  for the whole component. Because it is  absolutely positioned to
the top it defaults  to the top of the viewport if you don't use  any other
wrappers (or a layout grid). But you  can include it in a container and it'll
adapt  its dimensions to its constraints. Note: you can put it inside a fixed
container  if you want a fixed-to-top navigation.
 
[2] Its height is adjustable just make sure that you also adjust the
compensatory top margin on the following element  and reposition the elements
that rely on this (the mobile nav).

[3] The purpose of the low z-index is to enable the element to work as a
canvas. We want to lay elements onto it, those will have a higher index. */


.header-main { /*[1]*/
  position: absolute;
  background: #fff; /*[!]*/
  top: 0;
  left: 0;
  width: 100%;
  height: 60px; /*[2, !]*/
  z-index: 2; /*[3]*/
}


/* [4] You have to apply this class to the next element after the header in
the DOM. By creating a top margin it prevents the header from overlapping the
content. The margin has to be the same as the height of the header. */


.header-main__position-fix { /*[4]*/
  margin-top: 60px;
}





/*---- ##MOBILE-NAV-ELEMENT-CLOSED ----*/


/* The .header-main__nav-mobile is a child of the .header__main  and its
siblings are the site name and the hamburger icon (with its hidden parts). All
together these form the responsive mobile navigation.


It's positioned onto the .header-main element so it hides it. It will also
serve as the dropdown menu. In its closed state it has fix height but when
opened it extends to 100vh therefore expanding onto the rest of the page
creating the canvas for the horizontal menu.

[5] These properties position the nav relatively to its container, the
.header-main. It furthers the elements portability since its independent of
its surroundings.

[6] The width: 100%; stretches the nav element to fill its container. The
fixed height is not a problem when it comes to responsivity since nav heights
usually don't change.

Note: this height is customizable - if you want to change the height of the
nav,  do it here. Be aware that you need to change the positioning of the
other positiones elements and make sure that this height matches the header's.

[7] It has a z-index of 3 which puts it above the .header-main but below the
following elements. Thus it creates a canvas for them.

[8] This prevents anything from overflowing when the nav is closed.

[9] The transition and transition delay properties are part of the opening /
closing animations. They are creating a prolonged, animated switch between the
100px and 100vh states.

Note: This section only styles the nav in its closed state. For the open state, 
links and animation go down to the "##MOBILE-NAV-ELEMENT-OPEN" sub-section.

Note: when the mobile nav is active, the distinct  desktop nav is off thanks
to a display: none; declaration.

If you want to alter the height or background color of the mobile nav,  you
can do it here. If you want to alter the look of the site name (or logo), the
hamburger icon or the links, look below in the respective sub-sections. */


.header-main__nav-mobile {
  background: #f9d423; /*[!]*/
  position: absolute; /*[5]*/
  top: 0; /*[5]*/
  left: 0; /*[5]*/
  width: 100%; /*[6]*/
  height: 60px; /*[6, !]*/
  z-index: 3; /*[7]*/
  overflow: hidden; /*[8]*/
  transition: .5s; /*[9]*/
  transition-delay: .5s; /*[9]*/
}





/*---- ##MOBILE-SITE-NAME-ELEMENT ----*/


/*  The site's name or its logo can be put in this  element. It's absolutely
positioned to the left side of the header, it's centered vertically and its
z-index puts it on the top of the stack (above the header and mobile nav).

[10] If you want to alter it, makes sure that the font-size  matches the height of
the hamburger icon (see below) otherwise you won't be able to align them
properly.

[11] The transform-translate method centers it vertically perfectly no matter the
actual size of the element. 

[12] The left: 5%; gives the same gutter as the rest 
of the grid maintaining uniform alignment. Make sure to adjust this if you
want to use an element in a different grid.

[13] Its font and color are declared here to promote reusability. */


.header-main__sitename { 
  position: absolute;
  top: 50%; /*[11, !]*/
  left: 5%; /*[12, !]*/
  transform: translate(0, -50%); /*[11, !]*/
  z-index: 6;
  font-size: 1.25rem; /* = 20px */ /*[10, !]*/
  font-family: 'Lobster', cursive; /*[13, !]*/
  color: #fff; /*[13, !]*/
}

/* [14] Because the site name is part of the mobile nav it needs to be turned
off on desktops. */

@media (min-width: 768px) { /*[14]*/
  
  .header-main__sitename {
    display: none;
  }

}





/*---- ##HAMBUGER-ICON-ELEMENT ----*/


/* This hamburger icon consists of 3 parts: a checkbox, its associated  label
and 3 spans. The checkbox is hidden behind the header, the label  is
positioned where the icon would be. The user essentially clicks the  label and
that changes the state of the checkbox. (The checkbox itself is not styled
just tucked away behind the header and hidden on desktop with display: none.)

Because the label in  itself is invisible we would need an actual hamburger
icon. This is solved  by 3 span elements that are positioned over the label
and styled so they  appear as the elements of the hamburger icon.

For added visual flair the spans change their state when clicked to form  an
X. This transition is animated.

The click on the checkbox switches between the two states of the mobile  nav
(using sibling selectors): the X px and the 100vh one. 

Note: Every part of the hamburger icon is hidden on desktop using display: none 
to prevent accidental activation and spare unnecessary rendering. */





/*-- ###HAMBUGER-ICON-ELEMENT:LABEL --*/


/* [15] The label will act as one part out of three of the pure CSS hamburger
icon. This will be the clickable box. Its positioned to right  on the same
line as the h1 (site name). Its height is matched to the height of the h1 and
the z-index is lower by one. The reason: we want the spans to sit on top of
this label. Its vertical centering is solved by transform-translate and the
right margin is matched to the other gutters of the layout grid.

[16] Note: when you customize this icon you have to change the right margin to
match your grid's gutters.  Also, don't forget to match its height to the
height of the site name. You can change the width if you wish. */

.header-main__hamburger-icon { /*[15]*/
  position: absolute;
  top: 50%;
  right: 5%; /*[16, !]*/
  transform: translate(0, -50%);
  height: 1.25rem; /* = 20px */ /*[16, !]*/
  width: 1rem; /* = 16px */ /*[16, !]*/
  z-index: 5;
}

.header-main__hamburger-icon:hover {
  cursor: pointer;
}

/* [17] This media query hides the hamburger label and checkbox on desktop. */

@media (min-width: 768px) { /*[17]*/
  
  .header-main__hamburger-icon {
    display: none;
  }

  .header-main__hidden-checkbox {
    display: none;
  }

}





/*-- ###HAMBUGER-ICON-ELEMENT:SPANS --*/


/* [18] The icon itself is 3 span elements combined. Each span is styled the
same (essentially a dash) and positioned to the same point then the first and
the last ones are moved to form the icon.

[19] The position: absolute; positions the spans relative to their parent, the
label element.

[20] Their width is the same as the containing label's.

[21] Their z-index is the same as the h1's.

[22] The display: block, / height / background trio creates the dashes
themselves. 

[23] The transition property will become useful later when we want
to animate the icon. */

.header-main__icon-element { /*[18]*/
  display: block; /*[22]*/
  position: absolute; /*[19]*/
  top: 50%; /*[19]*/
  left: 0; /*[19]*/
  width: 100%; /*[20]*/
  height: 2px; /*[22, !]*/
  z-index: 6; /*[21]*/
  background: #fff; /*[22, !]*/
  transition: .5s; /*[23, !]*/
}


/* [24] Hides the hamburger spans on desktop. */

@media (min-width: 768px) { /*[24]*/
  
  .header-main__icon-element {
    display: none;
  }

}


/* [25] Moves the first span upwards.

[26] Moves the last span downwards. These two form the hamburger icon itself.

The spacing between the dashes is even. */

.header-main__icon-element:first-child { /*[25, !]*/
  top: 25%;
}

.header-main__icon-element:last-child { /*[26, !]*/
  top: 75%;
}





/*-- ###HAMBUGER-ICON-ELEMENT:ANIMATION --*/


/* This is the where things get interesting. :) We want the hamburger to
transform to an X when clicked then transform back. The code below does just
that by manipulating the span elements. (This concludes the hamburger icon
itself.)

[27] Brings all the spans to the center of the label and hides them with
opacity:0;

[28] Turns back the opacity of the first span, spins it around using rotate
and stops it in a 45 degree angle.

[29] Does the same for the last span but spins it in the opposite direction.

The transition: .5s; on the original spans gives the hamburger a nice animated
effect. */

.header-main__hidden-checkbox:checked + .header-main__hamburger-icon .header-main__icon-element { /*[27]*/
  opacity: 0;
  top: 50%;
}

.header-main__hidden-checkbox:checked + .header-main__hamburger-icon .header-main__icon-element:first-child { /*[28]*/
  opacity: 1;
  transform: rotate(405deg);
}

.header-main__hidden-checkbox:checked + .header-main__hamburger-icon .header-main__icon-element:last-child { /*[29]*/
  opacity: 1;
  transform: rotate(-405deg);
}





/*---- ##MOBILE-NAV-ELEMENT-OPEN ----*/


/* Up until this point we have the closed mobile nav in place with the site
name and working hamburger icon. The next section styles the mobile nav in its
open state (checkbox checked) its links and adds further animations to the
component.

[30] This height property extends the mobile nav element to fill the entire
height of the viewport once the checkbox is checked.

Don't forget that the block that displays the site name and the hamburger _is
the mobile nav_. Everything is positioned on top of it. It has a 100px height
by default which will be overriden once the user clicks the menu icon. */

.header-main__hidden-checkbox:checked ~ .header-main__nav-mobile {
  height: 100vh; /*[30]*/
  transition: .5s;
}





/*-- ###MOBILE-NAV-ELEMENT-OPEN:LINK-LIST --*/


/* This link list contains the mobile navigation links. By default it's
positioned  way outside the viewport and its contents are hidden with an
opacity: 0; property.

When the user clicks the checkbox the box floats back inside the viewport,
positioned on top of the center of the extended mobile nav and its links
appear.

[31] The .header-main__link-list is positioned outside of the viewport in
closed stance to solve the bug where there was an invisible but clickable box
which could freeze the whole nav. It's positioned to the center when the
checkbox is clicked. */

.header-main__link-list {
  position: absolute;
  top: -2000px; /*[31]*/
  left: 5%;
  right: 5%;
}

.header-main__hidden-checkbox:checked ~ .header-main__nav-mobile > .header-main__link-list {
  top: 50%; /*[24]*/
  transform: translate(0, -50%);
}


/* [32] Hides the link list and its contents on desktop. */

@media (min-width: 768px) { /*[32]*/

  .header-main__link-list {
    display: none;
  }

}





/*-- ###MOBILE-NAV-ELEMENT-OPEN:LINKS --*/


/* [33] The links are hidden by default then when the checkbox is ticked their
opacity is set to 1 with a delayed transition. The rest of the code is
cosmetic. */

.header-main__link-mobile { 
  opacity: 0; /*[33]*/
  color: #fff; /*[!]*/
  display: block;
  text-align: center; /*[!]*/
  text-decoration: none; /*[!]*/
  text-transform: uppercase; /*[!]*/
  font-family: 'Open Sans', sans-serif; /*[!]*/
  font-size: 1.25rem; /*[!]*/
  padding: 1.875rem; /*[!]*/
  border-bottom: 1px solid #fff; /*[!]*/
  transition: .5s; /*[33]*/
}

.header-main__link-mobile:first-child {
  border-top: 1px solid #fff; /*[!]*/
}

.header-main__hidden-checkbox:checked ~ .header-main__nav-mobile > .header-main__link-list > .header-main__link-mobile { /*[25]*/
  opacity: 1; /*[33]*/
  transition-delay: .5s; /*[33]*/
}





/*---- ##DESKTOP-NAV-ELEMENT ----*/


/* On desktop a new nav element triggers while the mobile navigation and its
associated elements (the hamburger icon, checkbox and site name) are turned
off by a display: none; property.

The desktop nav is positioned to the center of the header element and
displays its links inline. It is turned off on mobile. 

It consists of a nav element and anchor elements inside it. */

.header-main__nav-desktop {
  display: none;
}


@media (min-width: 768px){
  
  .header-main__nav-mobile {
    display: none;
  }


  /* [34] The high z-index display this nav on top of the header element.

  [35] The transform-translate method centers the nav element vertically.

  [36] The right-left positions center it horizontally and they fit into the
  grid. Make sure to revise these values if you use the nav in a different
  grid with different gutters.

  [37] The text-align property will center the links inside the nav element. */

  .header-main__nav-desktop {
    display: block;
    position: absolute;
    z-index: 6; /*[34]*/
    top: 50%; /*[35]*/
    transform: translate(0, -50%); /*[35]*/
    right: 5%; /*[36, !]*/
    left: 5%; /*[36, !]*/
    text-align: center; /*[37, !]*/
  }


    /* [38] This allows the links to accept box model properties.

    [39] Adds margin between the nav links. The last one will be negated by a
    :last-child pseudoselector.

    The rest is cosmetic. */

    .header-main__link-desktop {
      display: inline-block; /*[38]*/
      margin-right: 3rem; /*[39, !]*/
      text-decoration: none; /*[!]*/
      text-transform: uppercase; /*[!]*/
      font-weight: bold; /*[!]*/
      color: #f9d423; /*[!]*/
      font-family: 'Open Sans', sans-serif; /*[!]*/
    }

    .header-main__link-desktop:last-child {
      margin-right: 0;
    }

    .header-main__link-desktop:hover {
      color: #ede574; /*[!]*/
      transition: .5s; /*[!]*/
    }


    /* [40] This is a custom design that puts a styled site name in the center
    of the nav links that also acts as a home link. */

    .header-main__link-desktop--sitename { /*[40]*/
      font-family: 'Lobster', cursive; /*[!]*/
      font-size: 1.5rem; /*[!]*/
      text-transform: none; /*[!]*/
      font-weight: normal; /*[!]*/
    }

}





/*------------------------------------*\
  #SECONDARY-HEADER-STYLES
\*------------------------------------*/


/* This section styles the cover headers on each page. The base is the smaller
header seen on the pricing, team etc. pages. The main header is extended from
those with the  help of modifiers.

Structure: First we style the base secondary header, positioned the headline
on it  then add a background image. Then take all this and extend it to fit
the main header. */





/*---- ##SECONDARY-HEADER-BASE-ELEMENT ----*/


/* [1] The base is a <header> element. It's designed to take up 22% of the
viewport based on the initial mockup's dimensions.

[2] It has a position: relative value – its purpose is to allow us to center
the content vertically and horizontally with the transform/translate method.
It also has a text-align center that is specific to this project.

[3] You can set the base font-family, font-weight and color here. For font-
sizes look up the "headline" classes below. The background images are set
through modifiers below. */

.header-secondary {
  min-height: 22vh; /*[1, !]*/
  position: relative; /*[2]*/
  text-align: center; /*[2, !]*/
  font-family: 'Open Sans', sans-serif; /*[3, !]*/
  font-weight: 700; /*[3, !]*/
  color: #fff; /*[3, !]*/
}

  
  /*-- ###SECONDARY-HEADER-BASE-ELEMENT:CONTENT --*/


  /* [4] These selectors and rules position the content of the headers and set
  the font-size for headlines on the smaller secondary headers. They are
  chained together in the name of DRY code.

  [5] The position: absolute allows us to position the headline on the header.

  [6] The top: 50% value used with the transform/translate method centers
  the content vertically, while the left/right values (in conjuction with
  text-align center above) are responsible for the horizontal centering. The
  latter values fit in with the gutters defined in our grid. Feel free to adjust
  them if you use different gutters. Note: Why not transform/translate the
  horizontal values too? If we would use a mere left: 50%, it would create a
  tight box for the text that would break our layout. This left/right method
  allows the text to stretch across the header.

  [7] This is the font-size for the mobile view on the smaller headers. For
  the main header look at its dedicated section. */

  .header-secondary__content,
  .header-secondary__headline { /*[4]*/
    position: absolute; /*[5]*/
    top: 50%; /*[6]*/
    left: 5%; /*[6]*/
    right: 5%; /*[6]*/
    transform: translate(0, -50%); /*[6]*/
    font-size: 1.9rem; /*[7, !]*/
  }

  /* [8] A bigger font-size for bigger screens. */

  @media (min-width: 768px) { 

    .header-secondary__headline {
      font-size: 3.625rem; /*[8, !]*/
    }

  }


/*-- ###SECONDARY-HEADER-BASE-ELEMENT:BACKGROUNDS --*/


/* These are the different background pictures used in the headers. Some of
them have vertical positioning, using percentages. */

.header-secondary--pricing {
  background: url('../assets/bb-cover-pricing-blur.jpg') no-repeat center 85%/cover;
}

.header-secondary--team {
  background: url('../assets/bb-cover-team-blur.jpg') no-repeat center 95%/cover;
}

.header-secondary--contact {
  background: url('../assets/bb-cover-contact-blur.jpg') no-repeat center 65%/cover;
}

.header-secondary--faq {
  background: url('../assets/bb-cover-faq-blur.jpg') no-repeat center/cover;
}





/*-- ###SECONDARY-HEADER-BASE-ELEMENT:MAIN-MODIFIER --*/


/* This section contains the modifiers for the main header which is bigger
than its siblings,  and has a tagline and a button beside the main headline.

You can find almost all the styles here, except for the p element's margin
(that comes from  the utilities) and the button which comes from the button
component.

The main header has an adjusted height and font-sizes. One other difference
that it has a content wrapper that contains all its elements. It's that
wrapper what's positioned, not the elements themselves. You can find the
wrapper  above in the base section.*/

.header-secondary--main {
  background: url('../assets/bb-cover-main-blur.jpg') no-repeat center 35%/cover;
  min-height: 62vh;
}

  .header-secondary__headline--main {
    margin-bottom: 1.5rem;
    font-size: 2.25rem;
  }

  .header-secondary__tagline--main {
    font-size: 1.125rem;
    font-weight: normal;  
  }

  @media (min-width: 768px) {

    .header-secondary__headline--main {
      font-size: 4rem;
    }

    .header-secondary__tagline--main {
      font-size: 1.5rem;
    }

  }





/*------------------------------------*\
  #NEWSLETTER-SIGNUP-STYLES
\*------------------------------------*/


/* Independent component. It has its own color properties and internal layout
but most of its styling adapts to its environment.

It inherits fonts from the utilities (h2 and p) along with font-sizes, button
styles from the separate button components and external layout (relationship
to other components) from the layout grid.

If you want to change its internal layout or colors, you can do so here, for
everything else, go to the aforementioned sections. */





/* [1] Sets the background color, feel free to change it to fit your needs.

[2] Most of the elements (with the exception of the submit button) can be
aligned horizontally with this property.  */

.newsletter-signup {
  background: #f9d423; /*[1, !]*/
  text-align: center; /*[2]*/
}

  
  /* [3] We need a whitespace on top of the heading that conforms to the
  layout grid's vertical rhythm. Because of the margin collapsing we can
  execute this using a padding-top property. Make sure to match this value to
  whatever vertical rhythm you're using. 

  Only one that inherits its margin-bottom from the utility styles (h2).*/

  .newsletter-signup__heading { 
    color: #fff; /*[!]*/
    padding-top: 1.5rem; /*[3]*/
  }


  /* [4] The email input field is totally stripped of its default styling, has
  a new background color, a fixed width and height that matches the values on
  the default button component (to align them properly) and a margin-bottom
  value to preserve the vertical rhythm of the page.

  Note: Make sure to update its dimensions and margin if you use a different
  grid /  buttons. */

  .newsletter-signup__email-input { /*[4]*/
    background: #f2f2f2; /*[!]*/
    margin-bottom: 1.5rem; 
    width: 15.46875rem;
    height: 2.8125rem; 
    border: none;
  }


  /* These styles are specific to this particulat submit button and its
  position in the component.

  [5] This allows the button to move to a new line therefore be positioned
  below its corresponding input field.

  [6] The border: none; declaration negates the default styling of the inout
  field.

  [7] The margin declaration centers the element horizontally and adds a bit
  of whitespace below it.

  For the rest of its styles (dimensions, color, typography etc.) go to the
  Buttons section.  */

  .newsletter-signup__button {
    display: block; /*[5]*/
    border: none; /*[6]*/
    margin: 0 auto 1rem; /*[7]*/
  }


  /* [8] Adds whitespace to the bottom to preserve the vertical rhythm. Make sure
  to match its value   to your particular grid. */

  .newsletter-signup__disclaimer {
    color: #f2f2f2; /*[!]*/
    padding-bottom: 1.5rem; /*[8]*/
  }

  



/*------------------------------------*\
  #FOOTER-MAIN-STYLES
\*------------------------------------*/


/* The footer is another mostly self-contained component. It inherits h2 and p
font-styles and vertical rhythm from the utlitity styles and its width is
determined by a layout__item  container but other than these all of its styles
are contained in this section. */


/*---- ##FOOTER-MAIN-LAYOUT-EXTENSIONS ----*/


/* [1] Because the footer only contains text elements, this property can center everything. */

.footer-main {
  text-align: center; /*[1]*/
  background: #fff;
}


  /* [2] This rule set extends the vertical rhythm to the inside of the footer. Make
  sure that you match it with the rhythm dictated by the layout grid  and the
  utilities like general rules for headings and paragraphs. */

  .footer-main__nav, 
  .footer-main__social-icon-row { /*[2]*/
    margin-bottom: 1.5rem;
  }





/*---- ##FOOTER-MAIN-NAV-LINKS ----*/


  /* [3] The links could be styles in the general utilities but it would
  hinder reusability which we deemed more important. All of these styles are
  cosmetic though, feel free to change them if you wish.

  [4] The purpose of margin-right is to have horizontal spacing between the
  links. It adjusts through  a media query. The last-child negation of the
  margin can be found below, chained together with the rule for social icons.
  The reason for this is the similarity of the two cases, the social icons are
  essentially another row of links. (The hover states are chained similarily.) */

  .footer-main__nav-link {
    text-decoration: none; /*[3, !]*/
    font-family: 'Open Sans', sans-serif; /*[3, !]*/
    font-weight: 700; /*[3, !]*/
    color: #333; /*[3, !]*/
    margin-right: 1rem; /*[4]*/
  }

  @media (min-width: 768px) { /*[4]*/

    .footer-main__nav-link {
      margin-right: 3rem;
    }

  }

  .footer-main__nav-link:last-child,
  .footer-main__social-icon:last-child { /*[4]*/
    margin-right: 0;
  }


  /* [5] Nav links and social icons have the exact same hover state which makes
  chaining logical in the name of DRY code. */

  .footer-main__nav-link:hover,
  .footer-main__social-icon:hover { /*[5, !]*/
    color: #bdbdbd;
    transition: .5s; 
  }





/*---- ##FOOTER-MAIN-SOCIAL-ICONS ----*/


  /* The social icons are included via FontAwesome which means that they are
  basically text therefore can be styled that way.

  (If you want to change their size though, do it through the FontAwesome
  classes.)

  [6] Allows the icons to accept box model properties.

  [7] Adds vertical spacing. For the last-child negation, look for the sub-
  section above. */

  .footer-main__social-icon { 
    display: inline-block; /*[6]*/
    margin-right: 1rem; /*[7]*/
    color: #333;
    cursor: pointer;
  }





/*---- ##FOOTER-MAIN-COPYRIGHT-NOTICE ----*/


  .footer-main__copyright {
   font-size: 1rem;
   color: #bdbdbd; 
  }





/* ===================================================== */



.list-test { /* temporary proof of concept. not really working on smaller viewports. */
  margin: 0 auto;
  width: 35%;
  background: rebeccapurple;
  list-style: none;
}



