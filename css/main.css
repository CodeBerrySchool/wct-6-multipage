/*------------------------------------*\
  #HELPER-STYLES
\*------------------------------------*/

/* [x] The normalize.css has a top and bottom margin on h1-6 and p elements.
These helpers nullify that so it won't interfere with the grid. */

h1,
h2,
p {
  margin: 0;
}

/* This rule set extends the uniform vertical rhythm to the headings and
paragraphs. Not sure if  it belongs here or to the layout grid.  */

h1,
h2,
p {
  margin-bottom: 1.5rem;
}



/*------------------------------------*\
  #LAYOUT-STYLES
\*------------------------------------*/

/*
We use the following classes to create a very basic grid.

The .layout element creates a fluid container which is the immediate child of
the body. Inside that there is two kinds of layout containers: a 100% wide and
a 90% wide one.

The grid is capable of creating a three-column layout. The .layout__item--one-
third div takes up the 30%  of the available space and is floated to the left,
creating the three-column layout. It is only triggered upwards from 768px
thanks to a media query. Floats are cleared via a pseudo- element and a
dedicated class.

The vertical rhythm is established through a single margin-bottom declaration
on the .layout__item class. Since this class is present on every grid item, it
can create a uniform margin spacing.

The three column layout needs gutters. This is solved through margin
declarations for the first and last column. The width of the columns is
established as 30%, the remaining 9.9% is divided between a right margin for
the first and a left margin for the last column. (Note: This could've been
done way more easier through flexbox with a space-between value.)

The margin-bottom: 0; declaration on the last layout__item ensures that the
end of the page doesn't have extra margins. You may need to check the last
item  in the last container though. It could add extra margins on its own
which you have to handle differently. 

The .layout__item--nested modifier strips the container of its bottom margin. 
This is useful because when you have a container inside another container their bottom margins compound. 
With this modifier you can maintain the unified vertical rhythm.
*/

.layout {
  margin: 0;
  padding: 0;
  background: lightblue;
}


  .layout__item {
    margin-bottom: 1.5rem;
  }


  .layout__item--fullwidth {
    width: 100%;
    background: lightgreen;

  }


  .layout__item--ninetenth {
    width: 90%;
    max-width: 1600px;
    margin: 0 auto 1.5rem;
    background: lightyellow;
  }


  @media (min-width: 768px) {

    .layout__item--two-thirds {
      width: 66.6%;
      max-width: max-width: 1280px;
      margin: 0 auto 1.5rem;
      background: gold;
    }

  }


  @media (min-width: 768px) {

    .layout__item--one-third {
      width: 30%;
      float: left;
      overflow: hidden;
      background: rebeccapurple;
    }

    .layout__item--one-third:first-child {
      margin-right: 4.95%;
    }

    .layout__item--one-third:last-child {
      margin-left: 4.95%;
    }

  }


  .layout__item--clearfix::after {
    content: "";
    clear: both;
    display: block;
  }

  .layout__item--nested {
    margin-bottom: 0;
  }

  .layout__item:last-child {
    margin-bottom: 0;
  }


/*------------------------------------*\
  #TESTIMONIAL-STYLES
\*------------------------------------*/

.testimonial {
  width: 100%;
  background: lightcoral;
}

  .testimonial__image {
    width: 100%;
  }

footer p { /* Temporary until I handle the footer's last p. */
  margin-bottom: 0;
}





/*------------------------------------*\
  #MEDIA-OBJECT-STYLES
\*------------------------------------*/

.responsive-media {
  position: relative;
  padding-bottom: 56.25%; /* 16:9 aspect ratio */
  height: 0;
}

.responsive-media__embed {
  position: absolute;
  top: 0;
  left: 0;
  height: 100%;
  width: 100%;
}











