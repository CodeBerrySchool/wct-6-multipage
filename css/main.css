/*------------------------------------*\
  #HELPER-STYLES
\*------------------------------------*/

/* [x] The normalize.css has a top and bottom margin on h1-6 and p elements.
These helpers nullify that so it won't interfere with the grid. */

h1,
h2,
p {
  margin: 0;
}

/*------------------------------------*\
  #LAYOUT-STYLES
\*------------------------------------*/

/* We use the following classes to create a very basic grid.  The .layout
element creates a fluid container which is the immediate child of the body.
Inside that there is two kinds of layout containers: a 100% wide and a 90%
wide one. The grid is capable of creating a three-column layout. The
.layout__item--one-third div takes up the 33.3%  of the available space and is
floated to the left, creating the three-column layout. It is only triggered
upwards from 768px thanks to a media query. Floats are cleared via a pseudo-
element and a dedicated class. 
*/

.layout {
  margin: 0;
  padding: 0;
  background: lightblue;
}

  .layout__item--fullwidth {
    width: 100%;
    background: lightgreen;

  }

  .layout__item--ninetenth {
    width: 90%;
    margin: 0 auto;
    background: lightyellow;
  }

  @media (min-width: 768px) {

    .layout__item--one-third {
      width: 33.3%;
      float: left;
      overflow: hidden;
      background: rebeccapurple;
    }

  .layout__item--clearfix::after {
    content: "";
    clear: both;
    display: block;
  }

  }